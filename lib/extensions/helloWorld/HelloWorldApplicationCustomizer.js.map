{"version":3,"sources":["extensions/helloWorld/HelloWorldApplicationCustomizer.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,oDAAiD;AAGjD,sEAIwC;AAKxC,6BAA+B;AAC/B,oCAAsC;AAEtC,sDAAiD;AAEjD,IAAM,UAAU,GAAW,iCAAiC,CAAC;AAU7D,qFAAqF;AACrF;IACU,mDAAqE;IAD/E;;IAoCA,CAAC;IA9BQ,gDAAM,GAAb;QAEE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;YAC1B,IAAI,CAAC,eAAe;gBAClB,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,gBAAgB,CAC/C,qCAAe,CAAC,GAAG,EACnB,EAAE,SAAS,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;YAEpC,8EAA8E;YAC9E,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;gBAC1B,OAAO,CAAC,KAAK,CAAC,+CAA+C,CAAC,CAAC;gBAC/D,MAAM,CAAC;YACT,CAAC;YAED,IAAM,OAAO,GAAmE,KAAK,CAAC,aAAa,CACjG,oBAAU,EACV;gBACE,OAAO,EAAE,IAAI,CAAC,OAAO;aACtB,CACF,CAAC;YAEF,QAAQ,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;QAC5D,CAAC;QAED,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IAEO,oDAAU,GAAlB;QACE,OAAO,CAAC,GAAG,CAAC,gFAAgF,CAAC,CAAC;IAChG,CAAC;IA7BD;QADC,qBAAQ;iEA0BR;IAKH,sCAAC;CApCD,AAoCC,CAnCS,+CAAyB,GAmClC;kBApCoB,+BAA+B","file":"extensions/helloWorld/HelloWorldApplicationCustomizer.js","sourcesContent":["import { override } from '@microsoft/decorators';\nimport { Log } from '@microsoft/sp-core-library';\n\nimport {\n  BaseApplicationCustomizer,\n  PlaceholderContent,\n  PlaceholderName\n} from '@microsoft/sp-application-base';\nimport { Dialog } from '@microsoft/sp-dialog';\n\nimport * as strings from 'HelloWorldApplicationCustomizerStrings';\n\nimport * as React from 'react';\nimport * as ReactDom from 'react-dom';\n\nimport HelloWorld from './components/HelloWorld';\n\nconst LOG_SOURCE: string = 'HelloWorldApplicationCustomizer';\n\n/**\n * If your command set uses the ClientSideComponentProperties JSON input,\n * it will be deserialized into the BaseExtension.properties object.\n * You can define an interface to describe it.\n */\nexport interface IHelloWorldApplicationCustomizerProperties {\n}\n\n/** A Custom Action which can be run during execution of a Client Side Application */\nexport default class HelloWorldApplicationCustomizer\n  extends BaseApplicationCustomizer<IHelloWorldApplicationCustomizerProperties> {\n\n    private _topPlaceholder: PlaceholderContent | undefined;\n\n  @override\n  public onInit(): Promise<void> {\n\n    if (!this._topPlaceholder) {\n      this._topPlaceholder =\n        this.context.placeholderProvider.tryCreateContent(\n          PlaceholderName.Top,\n          { onDispose: this._onDispose });\n\n      // The extension should not assume that the expected placeholder is available.\n      if (!this._topPlaceholder) {\n        console.error('The expected placeholder (Top) was not found.');\n        return;\n      }\n\n      const element: React.ReactElement<IHelloWorldApplicationCustomizerProperties> = React.createElement(\n        HelloWorld,\n        {\n          context: this.context\n        }\n      );\n  \n      ReactDom.render(element, this._topPlaceholder.domElement);\n    }\n\n    return Promise.resolve();\n  }\n\n  private _onDispose(): void {\n    console.log('[HelloWorldApplicationCustomizer._onDispose] Disposed custom nav placeholders.');\n  }\n}\n"],"sourceRoot":"..\\..\\..\\src"}